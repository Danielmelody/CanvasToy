import { vec3 } from "gl-matrix";
import { Program } from "../../shader/Program";
import { CubeTexture } from "../../textures/CubeTexture";
import { Texture } from "../../textures/Texture";
import { Texture2D } from "../../textures/Texture2D";
import { IMaterial } from "../Material";
export declare class ISurfaceMaterial extends IMaterial {
    protected _geometryShader: Program;
    protected _debug: boolean;
    protected _blockShadow: boolean;
    protected _receiveShadow: boolean;
    protected _ambient: vec3;
    protected _mainTexture: Texture2D;
    protected _transparency: number;
    protected _alphaMap: Texture;
    protected _bumpMap: Texture;
    protected _displamentMap: Texture;
    protected _stencilMap: Texture;
    protected _reflectivity: number;
    protected _environmentMap: CubeTexture;
    get geometryShader(): Program;
    get debugMode(): boolean;
    get blockShadow(): boolean;
    get receiveShadow(): boolean;
    get mainTexture(): Texture2D;
    get ambient(): any;
    get transparency(): number;
    get alphaMap(): Texture;
    get bumpMap(): Texture;
    get displamentMap(): Texture;
    get stencilMap(): any;
    get environmentMap(): CubeTexture;
    setDebugMode(_debug: boolean): this;
    setCastShadow(_castShadow: boolean): this;
    setRecieveShadow(_receiveShadow: boolean): this;
    setMainTexture(_texture: Texture): this;
    setAmbient(_ambient: vec3): this;
    setTransparency(_transparency: number): this;
    setAlphaMap(_alphaMap: any): this;
    setBumpMap(_bumpMap: Texture): this;
    setDisplamentMap(_displamentMap: Texture): this;
    setStencilMap(_stencilMap: Texture): this;
    setReflectivity(_reflectivity: number): this;
    setEnvironmentMap(_environmentMap: CubeTexture): this;
    protected initShader(gl: WebGLRenderingContext): Program;
}
