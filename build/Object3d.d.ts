import { mat4, quat, vec3 } from "gl-matrix";
import { IAsyncResource } from "./IAsyncResource";
import { Scene } from "./Scene";
export declare class Object3d implements IAsyncResource {
    tag: string;
    scene: Scene;
    children: Object3d[];
    depredations: string[];
    protected _worldToObjectMatrix: mat4;
    protected _asyncFinished: Promise<Object3d>;
    protected _matrix: mat4;
    protected _parent: Object3d;
    protected _localMatrix: mat4;
    protected _localPosition: vec3;
    protected _localRotation: quat;
    protected _localScaling: vec3;
    protected _position: vec3;
    protected _scaling: vec3;
    protected _rotation: quat;
    constructor(tag?: string);
    get parent(): Object3d;
    setParent(_parent: Object3d): this;
    get localMatrix(): mat4;
    get matrix(): mat4;
    get worldToObjectMatrix(): mat4;
    setWorldToObjectMatrix(worldToObjectMatrix: mat4): this;
    get localPosition(): vec3;
    setLocalPosition(_localPosition: vec3): this;
    get position(): vec3;
    setPosition(_position: vec3): this;
    get localRotation(): quat;
    setLocalRotation(_localRotation: quat): this;
    get rotation(): quat;
    setRotation(_rotation: quat): this;
    get localScaling(): vec3;
    setLocalScaling(_localScaling: vec3): this;
    get scaling(): vec3;
    setScaling(_scaling: vec3): this;
    setTransformFromParent(): this;
    translate(delta: vec3): this;
    rotateX(angle: number): this;
    rotateY(angle: number): this;
    rotateZ(angle: number): this;
    lookAt(center: vec3, up?: any): this;
    lookAtLocal(center: vec3, up?: any): this;
    asyncFinished(): Promise<Object3d>;
    setAsyncFinished(promise: Promise<Object3d>): void;
    protected genOtherMatrixs(): void;
    protected deComposeLocalMatrix(): void;
    protected composeFromLocalTransform(): void;
    protected deComposeGlobalMatrix(): void;
    private composeFromGlobalTransform;
    private applyToChildren;
}
