import { Camera } from "../cameras/Camera";
import { IAsyncResource } from "../IAsyncResource";
import { Scene } from "../Scene";
import { Texture } from "../textures/Texture";
import { FrameBuffer } from "./FrameBuffer";
import { WebGLExtension } from "./IExtension";
export declare class Renderer {
    readonly canvas: HTMLCanvasElement;
    readonly gl: WebGLRenderingContext;
    readonly ext: WebGLExtension;
    debug: boolean;
    preloadRes: any[];
    usedTextureNum: number;
    renderTargets: Texture[];
    vertPrecision: string;
    fragPrecision: string;
    isAnimating: boolean;
    renderQueue: Array<(deltaTime: number) => void>;
    fbos: FrameBuffer[];
    scenes: Scene[];
    cameras: Camera[];
    frameRate: number;
    currentFPS: number;
    private startTime;
    private duration;
    private stopped;
    private materials;
    private isDeferred;
    constructor(canvas: HTMLCanvasElement, debug?: boolean);
    waitAsyncResouces(asyncRes: IAsyncResource): Promise<void>;
    stop(): void;
    start(): void;
    createFrameBuffer(): FrameBuffer;
    handleResource(scene: Scene): Promise<any[]>;
    forceDeferred(): void;
    render(scene: Scene, camera: Camera, adaptCanvasAspectRatio?: boolean): void;
    private renderLight;
    private main;
}
