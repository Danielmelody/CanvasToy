import { vec3 } from "gl-matrix";
import { Camera } from "../cameras/Camera";
import { Geometry } from "../geometries/Geometry";
import { BoundingBox2D } from "../Intersections/BoundingBox";
import { Object3d } from "../Object3d";
import { WebGLExtension } from "../renderer/IExtension";
import { Renderer } from "../renderer/Renderer";
import { ProcessingFrameBuffer } from "../renderer/SwapFramebuffer";
import { IBuildinRenderParamMaps } from "../shader/Program";
import { Texture } from "../textures/Texture";
import { ShadowLevel } from "./ShadowLevel";
export declare abstract class Light extends Object3d {
    volume: Geometry;
    protected _color: any;
    protected _idensity: number;
    protected _pcssArea: number;
    protected _shadowLevel: ShadowLevel;
    protected _shadowSoftness: number;
    protected _projectCamera: Camera;
    protected _shadowSize: number;
    protected gl: WebGLRenderingContext;
    protected ext: WebGLExtension;
    constructor(renderer: Renderer);
    abstract getProjecttionBoundingBox2D(camera: Camera): BoundingBox2D;
    setColor(color: vec3): this;
    setIdensity(idensity: number): this;
    setShadowLevel(shadowLevel: ShadowLevel): this;
    setShadowSize(shadowSize: number): this;
    setShadowSoftness(_shadowSoftness: number): this;
    setPCSSArea(_pcssArea: number): this;
    get shadowLevel(): ShadowLevel;
    get shadowSoftness(): number;
    getDeferredInfo(layer: number, renderCamera: Camera): any[];
    get shadowSize(): number;
    abstract get shadowMap(): Texture;
    get color(): any;
    get idensity(): number;
    get projectionMatrix(): any;
    get viewMatrix(): any;
    get pcssArea(): number;
    get far(): number;
    get near(): number;
    abstract get shadowFrameBuffers(): ProcessingFrameBuffer[];
    drawWithLightCamera(renderParam: IBuildinRenderParamMaps): void;
    abstract clearShadowFrameBuffer(): any;
    protected abstract init(render: Renderer): any;
}
