
> canvas-toy@0.4.0 test /Users/huyiming/shader/CanvasToy
> cd tests && sh testing.sh

testing: build..
testing: run..
[32m27 04 2017 15:52:17.603:INFO [karma]: [39mKarma v1.6.0 server started at http://0.0.0.0:9876/
[32m27 04 2017 15:52:17.606:INFO [launcher]: [39mLaunching browser Chrome with unlimited concurrency
[32m27 04 2017 15:52:17.613:INFO [launcher]: [39mStarting browser Chrome
[32m27 04 2017 15:52:19.261:INFO [Chrome 58.0.3029 (Mac OS X 10.11.6)]: [39mConnected on socket x8W6xOOKGOdflGy_AAAA with id 78342375
Chrome 58.0.3029 (Mac OS X 10.11.6) ERROR: Object{/absolute/Users/huyiming/shader/CanvasToy/node_modules/requirejs/require.js: '2c8b45573db27c131094a113e995236d20f043bb', /absolute/Users/huyiming/shader/CanvasToy/node_modules/karma-requirejs/lib/adapter.js: 'a0765fc3eacb39184893303c3bc2e821cb041787', /absolute/Users/huyiming/shader/CanvasToy/node_modules/jasmine-core/lib/jasmine-core/jasmine.js: '916005cc407925f4764668d61d04888d59258f5d', /absolute/Users/huyiming/shader/CanvasToy/node_modules/karma-jasmine/lib/boot.js: '945a38bf4e45ad2770eb94868231905a04a0bd3e', /absolute/Users/huyiming/shader/CanvasToy/node_modules/karma-jasmine/lib/adapter.js: '7a813cc290d592e664331c573a1a796192cdd1ad', /base/build/canvas-toy-test.js: 'b4215b987b67d1c6a28cf117787943ed8a7c3f48', /base/test-main.js: '60c070424170703385705b038699612b01f2f393'}

Chrome 58.0.3029 (Mac OS X 10.11.6) ERROR
  Uncaught Error: Mismatched anonymous define() module: function () {
      return (function (modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
              if (installedModules[moduleId])
                  return installedModules[moduleId].exports;
              var module = installedModules[moduleId] = {
                  exports: {},
                  id: moduleId,
                  loaded: false
              };
              modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
              module.loaded = true;
              return module.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.p = "";
          return __webpack_require__(0);
      })([
          function (module, exports, __webpack_require__) {
              exports.glMatrix = __webpack_require__(1);
              exports.mat2 = __webpack_require__(2);
              exports.mat2d = __webpack_require__(3);
              exports.mat3 = __webpack_require__(4);
              exports.mat4 = __webpack_require__(5);
              exports.quat = __webpack_require__(6);
              exports.vec2 = __webpack_require__(9);
              exports.vec3 = __webpack_require__(7);
              exports.vec4 = __webpack_require__(8);
          },
          function (module, exports) {
              var glMatrix = {};
              glMatrix.EPSILON = 0.000001;
              glMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
              glMatrix.RANDOM = Math.random;
              glMatrix.ENABLE_SIMD = false;
              glMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in this);
              glMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;
              glMatrix.setMatrixArrayType = function (type) {
                  glMatrix.ARRAY_TYPE = type;
              };
              var degree = Math.PI / 180;
              glMatrix.toRadian = function (a) {
                  return a * degree;
              };
              glMatrix.equals = function (a, b) {
                  return Math.abs(a - b) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
              };
              module.exports = glMatrix;
          },
          function (module, exports, __webpack_require__) {
              var glMatrix = __webpack_require__(1);
              var mat2 = {};
              mat2.create = function () {
                  var out = new glMatrix.ARRAY_TYPE(4);
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 1;
                  return out;
              };
              mat2.clone = function (a) {
                  var out = new glMatrix.ARRAY_TYPE(4);
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  return out;
              };
              mat2.copy = function (out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  return out;
              };
              mat2.identity = function (out) {
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 1;
                  return out;
              };
              mat2.fromValues = function (m00, m01, m10, m11) {
                  var out = new glMatrix.ARRAY_TYPE(4);
                  out[0] = m00;
                  out[1] = m01;
                  out[2] = m10;
                  out[3] = m11;
                  return out;
              };
              mat2.set = function (out, m00, m01, m10, m11) {
                  out[0] = m00;
                  out[1] = m01;
                  out[2] = m10;
                  out[3] = m11;
                  return out;
              };
              mat2.transpose = function (out, a) {
                  if (out === a) {
                      var a1 = a[1];
                      out[1] = a[2];
                      out[2] = a1;
                  }
                  else {
                      out[0] = a[0];
                      out[1] = a[2];
                      out[2] = a[1];
                      out[3] = a[3];
                  }
                  return out;
              };
              mat2.invert = function (out, a) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], det = a0 * a3 - a2 * a1;
                  if (!det) {
                      return null;
                  }
                  det = 1.0 / det;
                  out[0] = a3 * det;
                  out[1] = -a1 * det;
                  out[2] = -a2 * det;
                  out[3] = a0 * det;
                  return out;
              };
              mat2.adjoint = function (out, a) {
                  var a0 = a[0];
                  out[0] = a[3];
                  out[1] = -a[1];
                  out[2] = -a[2];
                  out[3] = a0;
                  return out;
              };
              mat2.determinant = function (a) {
                  return a[0] * a[3] - a[2] * a[1];
              };
              mat2.multiply = function (out, a, b) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
                  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
                  out[0] = a0 * b0 + a2 * b1;
                  out[1] = a1 * b0 + a3 * b1;
                  out[2] = a0 * b2 + a2 * b3;
                  out[3] = a1 * b2 + a3 * b3;
                  return out;
              };
              mat2.mul = mat2.multiply;
              mat2.rotate = function (out, a, rad) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], s = Math.sin(rad), c = Math.cos(rad);
                  out[0] = a0 * c + a2 * s;
                  out[1] = a1 * c + a3 * s;
                  out[2] = a0 * -s + a2 * c;
                  out[3] = a1 * -s + a3 * c;
                  return out;
              };
              mat2.scale = function (out, a, v) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], v0 = v[0], v1 = v[1];
                  out[0] = a0 * v0;
                  out[1] = a1 * v0;
                  out[2] = a2 * v1;
                  out[3] = a3 * v1;
                  return out;
              };
              mat2.fromRotation = function (out, rad) {
                  var s = Math.sin(rad), c = Math.cos(rad);
                  out[0] = c;
                  out[1] = s;
                  out[2] = -s;
                  out[3] = c;
                  return out;
              };
              mat2.fromScaling = function (out, v) {
                  out[0] = v[0];
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = v[1];
                  return out;
              };
              mat2.str = function (a) {
                  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
              };
              mat2.frob = function (a) {
                  return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)));
              };
              mat2.LDU = function (L, D, U, a) {
                  L[2] = a[2] / a[0];
                  U[0] = a[0];
                  U[1] = a[1];
                  U[3] = a[3] - L[2] * U[1];
                  return [L, D, U];
              };
              mat2.add = function (out, a, b) {
                  out[0] = a[0] + b[0];
                  out[1] = a[1] + b[1];
                  out[2] = a[2] + b[2];
                  out[3] = a[3] + b[3];
                  return out;
              };
              mat2.subtract = function (out, a, b) {
                  out[0] = a[0] - b[0];
                  out[1] = a[1] - b[1];
                  out[2] = a[2] - b[2];
                  out[3] = a[3] - b[3];
                  return out;
              };
              mat2.sub = mat2.subtract;
              mat2.exactEquals = function (a, b) {
                  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
              };
              mat2.equals = function (a, b) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
                  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
                  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                      Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
                      Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
                      Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)));
              };
              mat2.multiplyScalar = function (out, a, b) {
                  out[0] = a[0] * b;
                  out[1] = a[1] * b;
                  out[2] = a[2] * b;
                  out[3] = a[3] * b;
                  return out;
              };
              mat2.multiplyScalarAndAdd = function (out, a, b, scale) {
                  out[0] = a[0] + (b[0] * scale);
                  out[1] = a[1] + (b[1] * scale);
                  out[2] = a[2] + (b[2] * scale);
                  out[3] = a[3] + (b[3] * scale);
                  return out;
              };
              module.exports = mat2;
          },
          function (module, exports, __webpack_require__) {
              var glMatrix = __webpack_require__(1);
              var mat2d = {};
              mat2d.create = function () {
                  var out = new glMatrix.ARRAY_TYPE(6);
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 1;
                  out[4] = 0;
                  out[5] = 0;
                  return out;
              };
              mat2d.clone = function (a) {
                  var out = new glMatrix.ARRAY_TYPE(6);
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  out[4] = a[4];
                  out[5] = a[5];
                  return out;
              };
              mat2d.copy = function (out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  out[4] = a[4];
                  out[5] = a[5];
                  return out;
              };
              mat2d.identity = function (out) {
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 1;
                  out[4] = 0;
                  out[5] = 0;
                  return out;
              };
              mat2d.fromValues = function (a, b, c, d, tx, ty) {
                  var out = new glMatrix.ARRAY_TYPE(6);
                  out[0] = a;
                  out[1] = b;
                  out[2] = c;
                  out[3] = d;
                  out[4] = tx;
                  out[5] = ty;
                  return out;
              };
              mat2d.set = function (out, a, b, c, d, tx, ty) {
                  out[0] = a;
                  out[1] = b;
                  out[2] = c;
                  out[3] = d;
                  out[4] = tx;
                  out[5] = ty;
                  return out;
              };
              mat2d.invert = function (out, a) {
                  var aa = a[0], ab = a[1], ac = a[2], ad = a[3], atx = a[4], aty = a[5];
                  var det = aa * ad - ab * ac;
                  if (!det) {
                      return null;
                  }
                  det = 1.0 / det;
                  out[0] = ad * det;
                  out[1] = -ab * det;
                  out[2] = -ac * det;
                  out[3] = aa * det;
                  out[4] = (ac * aty - ad * atx) * det;
                  out[5] = (ab * atx - aa * aty) * det;
                  return out;
              };
              mat2d.determinant = function (a) {
                  return a[0] * a[3] - a[1] * a[2];
              };
              mat2d.multiply = function (out, a, b) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
                  out[0] = a0 * b0 + a2 * b1;
                  out[1] = a1 * b0 + a3 * b1;
                  out[2] = a0 * b2 + a2 * b3;
                  out[3] = a1 * b2 + a3 * b3;
                  out[4] = a0 * b4 + a2 * b5 + a4;
                  out[5] = a1 * b4 + a3 * b5 + a5;
                  return out;
              };
              mat2d.mul = mat2d.multiply;
              mat2d.rotate = function (out, a, rad) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], s = Math.sin(rad), c = Math.cos(rad);
                  out[0] = a0 * c + a2 * s;
                  out[1] = a1 * c + a3 * s;
                  out[2] = a0 * -s + a2 * c;
                  out[3] = a1 * -s + a3 * c;
                  out[4] = a4;
                  out[5] = a5;
                  return out;
              };
              mat2d.scale = function (out, a, v) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], v0 = v[0], v1 = v[1];
                  out[0] = a0 * v0;
                  out[1] = a1 * v0;
                  out[2] = a2 * v1;
                  out[3] = a3 * v1;
                  out[4] = a4;
                  out[5] = a5;
                  return out;
              };
              mat2d.translate = function (out, a, v) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], v0 = v[0], v1 = v[1];
                  out[0] = a0;
                  out[1] = a1;
                  out[2] = a2;
                  out[3] = a3;
                  out[4] = a0 * v0 + a2 * v1 + a4;
                  out[5] = a1 * v0 + a3 * v1 + a5;
                  return out;
              };
              mat2d.fromRotation = function (out, rad) {
                  var s = Math.sin(rad), c = Math.cos(rad);
                  out[0] = c;
                  out[1] = s;
                  out[2] = -s;
                  out[3] = c;
                  out[4] = 0;
                  out[5] = 0;
                  return out;
              };
              mat2d.fromScaling = function (out, v) {
                  out[0] = v[0];
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = v[1];
                  out[4] = 0;
                  out[5] = 0;
                  return out;
              };
              mat2d.fromTranslation = function (out, v) {
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 1;
                  out[4] = v[0];
                  out[5] = v[1];
                  return out;
              };
              mat2d.str = function (a) {
                  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
                      a[3] + ', ' + a[4] + ', ' + a[5] + ')';
              };
              mat2d.frob = function (a) {
                  return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1));
              };
              mat2d.add = function (out, a, b) {
                  out[0] = a[0] + b[0];
                  out[1] = a[1] + b[1];
                  out[2] = a[2] + b[2];
                  out[3] = a[3] + b[3];
                  out[4] = a[4] + b[4];
                  out[5] = a[5] + b[5];
                  return out;
              };
              mat2d.subtract = function (out, a, b) {
                  out[0] = a[0] - b[0];
                  out[1] = a[1] - b[1];
                  out[2] = a[2] - b[2];
                  out[3] = a[3] - b[3];
                  out[4] = a[4] - b[4];
                  out[5] = a[5] - b[5];
                  return out;
              };
              mat2d.sub = mat2d.subtract;
              mat2d.multiplyScalar = function (out, a, b) {
                  out[0] = a[0] * b;
                  out[1] = a[1] * b;
                  out[2] = a[2] * b;
                  out[3] = a[3] * b;
                  out[4] = a[4] * b;
                  out[5] = a[5] * b;
                  return out;
              };
              mat2d.multiplyScalarAndAdd = function (out, a, b, scale) {
                  out[0] = a[0] + (b[0] * scale);
                  out[1] = a[1] + (b[1] * scale);
                  out[2] = a[2] + (b[2] * scale);
                  out[3] = a[3] + (b[3] * scale);
                  out[4] = a[4] + (b[4] * scale);
                  out[5] = a[5] + (b[5] * scale);
                  return out;
              };
              mat2d.exactEquals = function (a, b) {
                  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
              };
              mat2d.equals = function (a, b) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
                  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
                  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                      Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
                      Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
                      Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
                      Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
                      Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)));
              };
              module.exports = mat2d;
          },
          function (module, exports, __webpack_require__) {
              var glMatrix = __webpack_require__(1);
              var mat3 = {};
              mat3.create = function () {
                  var out = new glMatrix.ARRAY_TYPE(9);
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 1;
                  out[5] = 0;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 1;
                  return out;
              };
              mat3.fromMat4 = function (out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[4];
                  out[4] = a[5];
                  out[5] = a[6];
                  out[6] = a[8];
                  out[7] = a[9];
                  out[8] = a[10];
                  return out;
              };
              mat3.clone = function (a) {
                  var out = new glMatrix.ARRAY_TYPE(9);
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  out[4] = a[4];
                  out[5] = a[5];
                  out[6] = a[6];
                  out[7] = a[7];
                  out[8] = a[8];
                  return out;
              };
              mat3.copy = function (out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  out[4] = a[4];
                  out[5] = a[5];
                  out[6] = a[6];
                  out[7] = a[7];
                  out[8] = a[8];
                  return out;
              };
              mat3.fromValues = function (m00, m01, m02, m10, m11, m12, m20, m21, m22) {
                  var out = new glMatrix.ARRAY_TYPE(9);
                  out[0] = m00;
                  out[1] = m01;
                  out[2] = m02;
                  out[3] = m10;
                  out[4] = m11;
                  out[5] = m12;
                  out[6] = m20;
                  out[7] = m21;
                  out[8] = m22;
                  return out;
              };
              mat3.set = function (out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
                  out[0] = m00;
                  out[1] = m01;
                  out[2] = m02;
                  out[3] = m10;
                  out[4] = m11;
                  out[5] = m12;
                  out[6] = m20;
                  out[7] = m21;
                  out[8] = m22;
                  return out;
              };
              mat3.identity = function (out) {
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 1;
                  out[5] = 0;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 1;
                  return out;
              };
              mat3.transpose = function (out, a) {
                  if (out === a) {
                      var a01 = a[1], a02 = a[2], a12 = a[5];
                      out[1] = a[3];
                      out[2] = a[6];
                      out[3] = a01;
                      out[5] = a[7];
                      out[6] = a02;
                      out[7] = a12;
                  }
                  else {
                      out[0] = a[0];
                      out[1] = a[3];
                      out[2] = a[6];
                      out[3] = a[1];
                      out[4] = a[4];
                      out[5] = a[7];
                      out[6] = a[2];
                      out[7] = a[5];
                      out[8] = a[8];
                  }
                  return out;
              };
              mat3.invert = function (out, a) {
                  var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], b01 = a22 * a11 - a12 * a21, b11 = -a22 * a10 + a12 * a20, b21 = a21 * a10 - a11 * a20, det = a00 * b01 + a01 * b11 + a02 * b21;
                  if (!det) {
                      return null;
                  }
                  det = 1.0 / det;
                  out[0] = b01 * det;
                  out[1] = (-a22 * a01 + a02 * a21) * det;
                  out[2] = (a12 * a01 - a02 * a11) * det;
                  out[3] = b11 * det;
                  out[4] = (a22 * a00 - a02 * a20) * det;
                  out[5] = (-a12 * a00 + a02 * a10) * det;
                  out[6] = b21 * det;
                  out[7] = (-a21 * a00 + a01 * a20) * det;
                  out[8] = (a11 * a00 - a01 * a10) * det;
                  return out;
              };
              mat3.adjoint = function (out, a) {
                  var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];
                  out[0] = (a11 * a22 - a12 * a21);
                  out[1] = (a02 * a21 - a01 * a22);
                  out[2] = (a01 * a12 - a02 * a11);
                  out[3] = (a12 * a20 - a10 * a22);
                  out[4] = (a00 * a22 - a02 * a20);
                  out[5] = (a02 * a10 - a00 * a12);
                  out[6] = (a10 * a21 - a11 * a20);
                  out[7] = (a01 * a20 - a00 * a21);
                  out[8] = (a00 * a11 - a01 * a10);
                  return out;
              };
              mat3.determinant = function (a) {
                  var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];
                  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
              };
              mat3.multiply = function (out, a, b) {
                  var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], b00 = b[0], b01 = b[1], b02 = b[2], b10 = b[3], b11 = b[4], b12 = b[5], b20 = b[6], b21 = b[7], b22 = b[8];
                  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
                  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
                  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
                  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
                  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
                  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
                  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
                  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
                  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
                  return out;
              };
              mat3.mul = mat3.multiply;
              mat3.translate = function (out, a, v) {
                  var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];
                  out[0] = a00;
                  out[1] = a01;
                  out[2] = a02;
                  out[3] = a10;
                  out[4] = a11;
                  out[5] = a12;
                  out[6] = x * a00 + y * a10 + a20;
                  out[7] = x * a01 + y * a11 + a21;
                  out[8] = x * a02 + y * a12 + a22;
                  return out;
              };
              mat3.rotate = function (out, a, rad) {
                  var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);
                  out[0] = c * a00 + s * a10;
                  out[1] = c * a01 + s * a11;
                  out[2] = c * a02 + s * a12;
                  out[3] = c * a10 - s * a00;
                  out[4] = c * a11 - s * a01;
                  out[5] = c * a12 - s * a02;
                  out[6] = a20;
                  out[7] = a21;
                  out[8] = a22;
                  return out;
              };
              mat3.scale = function (out, a, v) {
                  var x = v[0], y = v[1];
                  out[0] = x * a[0];
                  out[1] = x * a[1];
                  out[2] = x * a[2];
                  out[3] = y * a[3];
                  out[4] = y * a[4];
                  out[5] = y * a[5];
                  out[6] = a[6];
                  out[7] = a[7];
                  out[8] = a[8];
                  return out;
              };
              mat3.fromTranslation = function (out, v) {
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 1;
                  out[5] = 0;
                  out[6] = v[0];
                  out[7] = v[1];
                  out[8] = 1;
                  return out;
              };
              mat3.fromRotation = function (out, rad) {
                  var s = Math.sin(rad), c = Math.cos(rad);
                  out[0] = c;
                  out[1] = s;
                  out[2] = 0;
                  out[3] = -s;
                  out[4] = c;
                  out[5] = 0;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 1;
                  return out;
              };
              mat3.fromScaling = function (out, v) {
                  out[0] = v[0];
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = v[1];
                  out[5] = 0;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 1;
                  return out;
              };
              mat3.fromMat2d = function (out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = 0;
                  out[3] = a[2];
                  out[4] = a[3];
                  out[5] = 0;
                  out[6] = a[4];
                  out[7] = a[5];
                  out[8] = 1;
                  return out;
              };
              mat3.fromQuat = function (out, q) {
                  var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, yx = y * x2, yy = y * y2, zx = z * x2, zy = z * y2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
                  out[0] = 1 - yy - zz;
                  out[3] = yx - wz;
                  out[6] = zx + wy;
                  out[1] = yx + wz;
                  out[4] = 1 - xx - zz;
                  out[7] = zy - wx;
                  out[2] = zx - wy;
                  out[5] = zy + wx;
                  out[8] = 1 - xx - yy;
                  return out;
              };
              mat3.normalFromMat4 = function (out, a) {
                  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32, det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                  if (!det) {
                      return null;
                  }
                  det = 1.0 / det;
                  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                  return out;
              };
              mat3.str = function (a) {
                  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
                      a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +
                      a[6] + ', ' + a[7] + ', ' + a[8] + ')';
              };
              mat3.frob = function (a) {
                  return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)));
              };
              mat3.add = function (out, a, b) {
                  out[0] = a[0] + b[0];
                  out[1] = a[1] + b[1];
                  out[2] = a[2] + b[2];
                  out[3] = a[3] + b[3];
                  out[4] = a[4] + b[4];
                  out[5] = a[5] + b[5];
                  out[6] = a[6] + b[6];
                  out[7] = a[7] + b[7];
                  out[8] = a[8] + b[8];
                  return out;
              };
              mat3.subtract = function (out, a, b) {
                  out[0] = a[0] - b[0];
                  out[1] = a[1] - b[1];
                  out[2] = a[2] - b[2];
                  out[3] = a[3] - b[3];
                  out[4] = a[4] - b[4];
                  out[5] = a[5] - b[5];
                  out[6] = a[6] - b[6];
                  out[7] = a[7] - b[7];
                  out[8] = a[8] - b[8];
                  return out;
              };
              mat3.sub = mat3.subtract;
              mat3.multiplyScalar = function (out, a, b) {
                  out[0] = a[0] * b;
                  out[1] = a[1] * b;
                  out[2] = a[2] * b;
                  out[3] = a[3] * b;
                  out[4] = a[4] * b;
                  out[5] = a[5] * b;
                  out[6] = a[6] * b;
                  out[7] = a[7] * b;
                  out[8] = a[8] * b;
                  return out;
              };
              mat3.multiplyScalarAndAdd = function (out, a, b, scale) {
                  out[0] = a[0] + (b[0] * scale);
                  out[1] = a[1] + (b[1] * scale);
                  out[2] = a[2] + (b[2] * scale);
                  out[3] = a[3] + (b[3] * scale);
                  out[4] = a[4] + (b[4] * scale);
                  out[5] = a[5] + (b[5] * scale);
                  out[6] = a[6] + (b[6] * scale);
                  out[7] = a[7] + (b[7] * scale);
                  out[8] = a[8] + (b[8] * scale);
                  return out;
              };
              mat3.exactEquals = function (a, b) {
                  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&
                      a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&
                      a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
              };
              mat3.equals = function (a, b) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
                  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];
                  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                      Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
                      Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
                      Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
                      Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
                      Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
                      Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
                      Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
                      Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)));
              };
              module.exports = mat3;
          },
          function (module, exports, __webpack_require__) {
              var glMatrix = __webpack_require__(1);
              var mat4 = {
                  scalar: {},
                  SIMD: {},
              };
              mat4.create = function () {
                  var out = new glMatrix.ARRAY_TYPE(16);
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = 1;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = 0;
                  out[10] = 1;
                  out[11] = 0;
                  out[12] = 0;
                  out[13] = 0;
                  out[14] = 0;
                  out[15] = 1;
                  return out;
              };
              mat4.clone = function (a) {
                  var out = new glMatrix.ARRAY_TYPE(16);
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  out[4] = a[4];
                  out[5] = a[5];
                  out[6] = a[6];
                  out[7] = a[7];
                  out[8] = a[8];
                  out[9] = a[9];
                  out[10] = a[10];
                  out[11] = a[11];
                  out[12] = a[12];
                  out[13] = a[13];
                  out[14] = a[14];
                  out[15] = a[15];
                  return out;
              };
              mat4.copy = function (out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  out[4] = a[4];
                  out[5] = a[5];
                  out[6] = a[6];
                  out[7] = a[7];
                  out[8] = a[8];
                  out[9] = a[9];
                  out[10] = a[10];
                  out[11] = a[11];
                  out[12] = a[12];
                  out[13] = a[13];
                  out[14] = a[14];
                  out[15] = a[15];
                  return out;
              };
              mat4.fromValues = function (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
                  var out = new glMatrix.ARRAY_TYPE(16);
                  out[0] = m00;
                  out[1] = m01;
                  out[2] = m02;
                  out[3] = m03;
                  out[4] = m10;
                  out[5] = m11;
                  out[6] = m12;
                  out[7] = m13;
                  out[8] = m20;
                  out[9] = m21;
                  out[10] = m22;
                  out[11] = m23;
                  out[12] = m30;
                  out[13] = m31;
                  out[14] = m32;
                  out[15] = m33;
                  return out;
              };
              mat4.set = function (out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
                  out[0] = m00;
                  out[1] = m01;
                  out[2] = m02;
                  out[3] = m03;
                  out[4] = m10;
                  out[5] = m11;
                  out[6] = m12;
                  out[7] = m13;
                  out[8] = m20;
                  out[9] = m21;
                  out[10] = m22;
                  out[11] = m23;
                  out[12] = m30;
                  out[13] = m31;
                  out[14] = m32;
                  out[15] = m33;
                  return out;
              };
              mat4.identity = function (out) {
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = 1;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = 0;
                  out[10] = 1;
                  out[11] = 0;
                  out[12] = 0;
                  out[13] = 0;
                  out[14] = 0;
                  out[15] = 1;
                  return out;
              };
              mat4.scalar.transpose = function (out, a) {
                  if (out === a) {
                      var a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];
                      out[1] = a[4];
                      out[2] = a[8];
                      out[3] = a[12];
                      out[4] = a01;
                      out[6] = a[9];
                      out[7] = a[13];
                      out[8] = a02;
                      out[9] = a12;
                      out[11] = a[14];
                      out[12] = a03;
                      out[13] = a13;
                      out[14] = a23;
                  }
                  else {
                      out[0] = a[0];
                      out[1] = a[4];
                      out[2] = a[8];
                      out[3] = a[12];
                      out[4] = a[1];
                      out[5] = a[5];
                      out[6] = a[9];
                      out[7] = a[13];
                      out[8] = a[2];
                      out[9] = a[6];
                      out[10] = a[10];
                      out[11] = a[14];
                      out[12] = a[3];
                      out[13] = a[7];
                      out[14] = a[11];
                      out[15] = a[15];
                  }
                  return out;
              };
              mat4.SIMD.transpose = function (out, a) {
                  var a0, a1, a2, a3, tmp01, tmp23, out0, out1, out2, out3;
                  a0 = SIMD.Float32x4.load(a, 0);
                  a1 = SIMD.Float32x4.load(a, 4);
                  a2 = SIMD.Float32x4.load(a, 8);
                  a3 = SIMD.Float32x4.load(a, 12);
                  tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
                  tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
                  out0 = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);
                  out1 = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);
                  SIMD.Float32x4.store(out, 0, out0);
                  SIMD.Float32x4.store(out, 4, out1);
                  tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
                  tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
                  out2 = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);
                  out3 = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);
                  SIMD.Float32x4.store(out, 8, out2);
                  SIMD.Float32x4.store(out, 12, out3);
                  return out;
              };
              mat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;
              mat4.scalar.invert = function (out, a) {
                  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32, det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
                  if (!det) {
                      return null;
                  }
                  det = 1.0 / det;
                  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
                  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
                  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
                  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
                  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
                  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
                  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
                  return out;
              };
              mat4.SIMD.invert = function (out, a) {
                  var row0, row1, row2, row3, tmp1, minor0, minor1, minor2, minor3, det, a0 = SIMD.Float32x4.load(a, 0), a1 = SIMD.Float32x4.load(a, 4), a2 = SIMD.Float32x4.load(a, 8), a3 = SIMD.Float32x4.load(a, 12);
                  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
                  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
                  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);
                  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);
                  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
                  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
                  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);
                  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);
                  tmp1 = SIMD.Float32x4.mul(row2, row3);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                  minor0 = SIMD.Float32x4.mul(row1, tmp1);
                  minor1 = SIMD.Float32x4.mul(row0, tmp1);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);
                  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);
                  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);
                  tmp1 = SIMD.Float32x4.mul(row1, row2);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);
                  minor3 = SIMD.Float32x4.mul(row0, tmp1);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));
                  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);
                  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);
                  tmp1 = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                  row2 = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);
                  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);
                  minor2 = SIMD.Float32x4.mul(row0, tmp1);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));
                  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);
                  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);
                  tmp1 = SIMD.Float32x4.mul(row0, row1);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);
                  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);
                  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));
                  tmp1 = SIMD.Float32x4.mul(row0, row3);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));
                  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);
                  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));
                  tmp1 = SIMD.Float32x4.mul(row0, row2);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);
                  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));
                  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);
                  det = SIMD.Float32x4.mul(row0, minor0);
                  det = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);
                  det = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);
                  tmp1 = SIMD.Float32x4.reciprocalApproximation(det);
                  det = SIMD.Float32x4.sub(SIMD.Float32x4.add(tmp1, tmp1), SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));
                  det = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);
                  if (!det) {
                      return null;
                  }
                  SIMD.Float32x4.store(out, 0, SIMD.Float32x4.mul(det, minor0));
                  SIMD.Float32x4.store(out, 4, SIMD.Float32x4.mul(det, minor1));
                  SIMD.Float32x4.store(out, 8, SIMD.Float32x4.mul(det, minor2));
                  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));
                  return out;
              };
              mat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;
              mat4.scalar.adjoint = function (out, a) {
                  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
                  out[0] = (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
                  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
                  out[2] = (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
                  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
                  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
                  out[5] = (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
                  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
                  out[7] = (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
                  out[8] = (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
                  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
                  out[10] = (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
                  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
                  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
                  out[13] = (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
                  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
                  out[15] = (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
                  return out;
              };
              mat4.SIMD.adjoint = function (out, a) {
                  var a0, a1, a2, a3;
                  var row0, row1, row2, row3;
                  var tmp1;
                  var minor0, minor1, minor2, minor3;
                  var a0 = SIMD.Float32x4.load(a, 0);
                  var a1 = SIMD.Float32x4.load(a, 4);
                  var a2 = SIMD.Float32x4.load(a, 8);
                  var a3 = SIMD.Float32x4.load(a, 12);
                  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
                  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
                  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);
                  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);
                  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
                  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
                  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);
                  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);
                  tmp1 = SIMD.Float32x4.mul(row2, row3);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                  minor0 = SIMD.Float32x4.mul(row1, tmp1);
                  minor1 = SIMD.Float32x4.mul(row0, tmp1);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);
                  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);
                  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);
                  tmp1 = SIMD.Float32x4.mul(row1, row2);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);
                  minor3 = SIMD.Float32x4.mul(row0, tmp1);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));
                  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);
                  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);
                  tmp1 = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                  row2 = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);
                  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);
                  minor2 = SIMD.Float32x4.mul(row0, tmp1);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));
                  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);
                  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);
                  tmp1 = SIMD.Float32x4.mul(row0, row1);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);
                  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);
                  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));
                  tmp1 = SIMD.Float32x4.mul(row0, row3);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));
                  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);
                  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));
                  tmp1 = SIMD.Float32x4.mul(row0, row2);
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
                  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);
                  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));
                  tmp1 = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
                  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));
                  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);
                  SIMD.Float32x4.store(out, 0, minor0);
                  SIMD.Float32x4.store(out, 4, minor1);
                  SIMD.Float32x4.store(out, 8, minor2);
                  SIMD.Float32x4.store(out, 12, minor3);
                  return out;
              };
              mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;
              mat4.determinant = function (a) {
                  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32;
                  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
              };
              mat4.SIMD.multiply = function (out, a, b) {
                  var a0 = SIMD.Float32x4.load(a, 0);
                  var a1 = SIMD.Float32x4.load(a, 4);
                  var a2 = SIMD.Float32x4.load(a, 8);
                  var a3 = SIMD.Float32x4.load(a, 12);
                  var b0 = SIMD.Float32x4.load(b, 0);
                  var out0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2), SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));
                  SIMD.Float32x4.store(out, 0, out0);
                  var b1 = SIMD.Float32x4.load(b, 4);
                  var out1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2), SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));
                  SIMD.Float32x4.store(out, 4, out1);
                  var b2 = SIMD.Float32x4.load(b, 8);
                  var out2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2), SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));
                  SIMD.Float32x4.store(out, 8, out2);
                  var b3 = SIMD.Float32x4.load(b, 12);
                  var out3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1), SIMD.Float32x4.add(SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2), SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));
                  SIMD.Float32x4.store(out, 12, out3);
                  return out;
              };
              mat4.scalar.multiply = function (out, a, b) {
                  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
                  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
                  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                  b0 = b[4];
                  b1 = b[5];
                  b2 = b[6];
                  b3 = b[7];
                  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                  b0 = b[8];
                  b1 = b[9];
                  b2 = b[10];
                  b3 = b[11];
                  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                  b0 = b[12];
                  b1 = b[13];
                  b2 = b[14];
                  b3 = b[15];
                  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                  return out;
              };
              mat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;
              mat4.mul = mat4.multiply;
              mat4.scalar.translate = function (out, a, v) {
                  var x = v[0], y = v[1], z = v[2], a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;
                  if (a === out) {
                      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
                      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
                      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
                      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
                  }
                  else {
                      a00 = a[0];
                      a01 = a[1];
                      a02 = a[2];
                      a03 = a[3];
                      a10 = a[4];
                      a11 = a[5];
                      a12 = a[6];
                      a13 = a[7];
                      a20 = a[8];
                      a21 = a[9];
                      a22 = a[10];
                      a23 = a[11];
                      out[0] = a00;
                      out[1] = a01;
                      out[2] = a02;
                      out[3] = a03;
                      out[4] = a10;
                      out[5] = a11;
                      out[6] = a12;
                      out[7] = a13;
                      out[8] = a20;
                      out[9] = a21;
                      out[10] = a22;
                      out[11] = a23;
                      out[12] = a00 * x + a10 * y + a20 * z + a[12];
                      out[13] = a01 * x + a11 * y + a21 * z + a[13];
                      out[14] = a02 * x + a12 * y + a22 * z + a[14];
                      out[15] = a03 * x + a13 * y + a23 * z + a[15];
                  }
                  return out;
              };
              mat4.SIMD.translate = function (out, a, v) {
                  var a0 = SIMD.Float32x4.load(a, 0), a1 = SIMD.Float32x4.load(a, 4), a2 = SIMD.Float32x4.load(a, 8), a3 = SIMD.Float32x4.load(a, 12), vec = SIMD.Float32x4(v[0], v[1], v[2], 0);
                  if (a !== out) {
                      out[0] = a[0];
                      out[1] = a[1];
                      out[2] = a[2];
                      out[3] = a[3];
                      out[4] = a[4];
                      out[5] = a[5];
                      out[6] = a[6];
                      out[7] = a[7];
                      out[8] = a[8];
                      out[9] = a[9];
                      out[10] = a[10];
                      out[11] = a[11];
                  }
                  a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));
                  a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));
                  a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));
                  var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));
                  SIMD.Float32x4.store(out, 12, t0);
                  return out;
              };
              mat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;
              mat4.scalar.scale = function (out, a, v) {
                  var x = v[0], y = v[1], z = v[2];
                  out[0] = a[0] * x;
                  out[1] = a[1] * x;
                  out[2] = a[2] * x;
                  out[3] = a[3] * x;
                  out[4] = a[4] * y;
                  out[5] = a[5] * y;
                  out[6] = a[6] * y;
                  out[7] = a[7] * y;
                  out[8] = a[8] * z;
                  out[9] = a[9] * z;
                  out[10] = a[10] * z;
                  out[11] = a[11] * z;
                  out[12] = a[12];
                  out[13] = a[13];
                  out[14] = a[14];
                  out[15] = a[15];
                  return out;
              };
              mat4.SIMD.scale = function (out, a, v) {
                  var a0, a1, a2;
                  var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);
                  a0 = SIMD.Float32x4.load(a, 0);
                  SIMD.Float32x4.store(out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));
                  a1 = SIMD.Float32x4.load(a, 4);
                  SIMD.Float32x4.store(out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));
                  a2 = SIMD.Float32x4.load(a, 8);
                  SIMD.Float32x4.store(out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));
                  out[12] = a[12];
                  out[13] = a[13];
                  out[14] = a[14];
                  out[15] = a[15];
                  return out;
              };
              mat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;
              mat4.rotate = function (out, a, rad, axis) {
                  var x = axis[0], y = axis[1], z = axis[2], len = Math.sqrt(x * x + y * y + z * z), s, c, t, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, b00, b01, b02, b10, b11, b12, b20, b21, b22;
                  if (Math.abs(len) < glMatrix.EPSILON) {
                      return null;
                  }
                  len = 1 / len;
                  x *= len;
                  y *= len;
                  z *= len;
                  s = Math.sin(rad);
                  c = Math.cos(rad);
                  t = 1 - c;
                  a00 = a[0];
                  a01 = a[1];
                  a02 = a[2];
                  a03 = a[3];
                  a10 = a[4];
                  a11 = a[5];
                  a12 = a[6];
                  a13 = a[7];
                  a20 = a[8];
                  a21 = a[9];
                  a22 = a[10];
                  a23 = a[11];
                  b00 = x * x * t + c;
                  b01 = y * x * t + z * s;
                  b02 = z * x * t - y * s;
                  b10 = x * y * t - z * s;
                  b11 = y * y * t + c;
                  b12 = z * y * t + x * s;
                  b20 = x * z * t + y * s;
                  b21 = y * z * t - x * s;
                  b22 = z * z * t + c;
                  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
                  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
                  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
                  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
                  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
                  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
                  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
                  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
                  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
                  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
                  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
                  out[11] = a03 * b20 + a13 * b21 + a23 * b22;
                  if (a !== out) {
                      out[12] = a[12];
                      out[13] = a[13];
                      out[14] = a[14];
                      out[15] = a[15];
                  }
                  return out;
              };
              mat4.scalar.rotateX = function (out, a, rad) {
                  var s = Math.sin(rad), c = Math.cos(rad), a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
                  if (a !== out) {
                      out[0] = a[0];
                      out[1] = a[1];
                      out[2] = a[2];
                      out[3] = a[3];
                      out[12] = a[12];
                      out[13] = a[13];
                      out[14] = a[14];
                      out[15] = a[15];
                  }
                  out[4] = a10 * c + a20 * s;
                  out[5] = a11 * c + a21 * s;
                  out[6] = a12 * c + a22 * s;
                  out[7] = a13 * c + a23 * s;
                  out[8] = a20 * c - a10 * s;
                  out[9] = a21 * c - a11 * s;
                  out[10] = a22 * c - a12 * s;
                  out[11] = a23 * c - a13 * s;
                  return out;
              };
              mat4.SIMD.rotateX = function (out, a, rad) {
                  var s = SIMD.Float32x4.splat(Math.sin(rad)), c = SIMD.Float32x4.splat(Math.cos(rad));
                  if (a !== out) {
                      out[0] = a[0];
                      out[1] = a[1];
                      out[2] = a[2];
                      out[3] = a[3];
                      out[12] = a[12];
                      out[13] = a[13];
                      out[14] = a[14];
                      out[15] = a[15];
                  }
                  var a_1 = SIMD.Float32x4.load(a, 4);
                  var a_2 = SIMD.Float32x4.load(a, 8);
                  SIMD.Float32x4.store(out, 4, SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));
                  SIMD.Float32x4.store(out, 8, SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));
                  return out;
              };
              mat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;
              mat4.scalar.rotateY = function (out, a, rad) {
                  var s = Math.sin(rad), c = Math.cos(rad), a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
                  if (a !== out) {
                      out[4] = a[4];
                      out[5] = a[5];
                      out[6] = a[6];
                      out[7] = a[7];
                      out[12] = a[12];
                      out[13] = a[13];
                      out[14] = a[14];
                      out[15] = a[15];
                  }
                  out[0] = a00 * c - a20 * s;
                  out[1] = a01 * c - a21 * s;
                  out[2] = a02 * c - a22 * s;
                  out[3] = a03 * c - a23 * s;
                  out[8] = a00 * s + a20 * c;
                  out[9] = a01 * s + a21 * c;
                  out[10] = a02 * s + a22 * c;
                  out[11] = a03 * s + a23 * c;
                  return out;
              };
              mat4.SIMD.rotateY = function (out, a, rad) {
                  var s = SIMD.Float32x4.splat(Math.sin(rad)), c = SIMD.Float32x4.splat(Math.cos(rad));
                  if (a !== out) {
                      out[4] = a[4];
                      out[5] = a[5];
                      out[6] = a[6];
                      out[7] = a[7];
                      out[12] = a[12];
                      out[13] = a[13];
                      out[14] = a[14];
                      out[15] = a[15];
                  }
                  var a_0 = SIMD.Float32x4.load(a, 0);
                  var a_2 = SIMD.Float32x4.load(a, 8);
                  SIMD.Float32x4.store(out, 0, SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));
                  SIMD.Float32x4.store(out, 8, SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));
                  return out;
              };
              mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;
              mat4.scalar.rotateZ = function (out, a, rad) {
                  var s = Math.sin(rad), c = Math.cos(rad), a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
                  if (a !== out) {
                      out[8] = a[8];
                      out[9] = a[9];
                      out[10] = a[10];
                      out[11] = a[11];
                      out[12] = a[12];
                      out[13] = a[13];
                      out[14] = a[14];
                      out[15] = a[15];
                  }
                  out[0] = a00 * c + a10 * s;
                  out[1] = a01 * c + a11 * s;
                  out[2] = a02 * c + a12 * s;
                  out[3] = a03 * c + a13 * s;
                  out[4] = a10 * c - a00 * s;
                  out[5] = a11 * c - a01 * s;
                  out[6] = a12 * c - a02 * s;
                  out[7] = a13 * c - a03 * s;
                  return out;
              };
              mat4.SIMD.rotateZ = function (out, a, rad) {
                  var s = SIMD.Float32x4.splat(Math.sin(rad)), c = SIMD.Float32x4.splat(Math.cos(rad));
                  if (a !== out) {
                      out[8] = a[8];
                      out[9] = a[9];
                      out[10] = a[10];
                      out[11] = a[11];
                      out[12] = a[12];
                      out[13] = a[13];
                      out[14] = a[14];
                      out[15] = a[15];
                  }
                  var a_0 = SIMD.Float32x4.load(a, 0);
                  var a_1 = SIMD.Float32x4.load(a, 4);
                  SIMD.Float32x4.store(out, 0, SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));
                  SIMD.Float32x4.store(out, 4, SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));
                  return out;
              };
              mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;
              mat4.fromTranslation = function (out, v) {
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = 1;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = 0;
                  out[10] = 1;
                  out[11] = 0;
                  out[12] = v[0];
                  out[13] = v[1];
                  out[14] = v[2];
                  out[15] = 1;
                  return out;
              };
              mat4.fromScaling = function (out, v) {
                  out[0] = v[0];
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = v[1];
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = 0;
                  out[10] = v[2];
                  out[11] = 0;
                  out[12] = 0;
                  out[13] = 0;
                  out[14] = 0;
                  out[15] = 1;
                  return out;
              };
              mat4.fromRotation = function (out, rad, axis) {
                  var x = axis[0], y = axis[1], z = axis[2], len = Math.sqrt(x * x + y * y + z * z), s, c, t;
                  if (Math.abs(len) < glMatrix.EPSILON) {
                      return null;
                  }
                  len = 1 / len;
                  x *= len;
                  y *= len;
                  z *= len;
                  s = Math.sin(rad);
                  c = Math.cos(rad);
                  t = 1 - c;
                  out[0] = x * x * t + c;
                  out[1] = y * x * t + z * s;
                  out[2] = z * x * t - y * s;
                  out[3] = 0;
                  out[4] = x * y * t - z * s;
                  out[5] = y * y * t + c;
                  out[6] = z * y * t + x * s;
                  out[7] = 0;
                  out[8] = x * z * t + y * s;
                  out[9] = y * z * t - x * s;
                  out[10] = z * z * t + c;
                  out[11] = 0;
                  out[12] = 0;
                  out[13] = 0;
                  out[14] = 0;
                  out[15] = 1;
                  return out;
              };
              mat4.fromXRotation = function (out, rad) {
                  var s = Math.sin(rad), c = Math.cos(rad);
                  out[0] = 1;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = c;
                  out[6] = s;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = -s;
                  out[10] = c;
                  out[11] = 0;
                  out[12] = 0;
                  out[13] = 0;
                  out[14] = 0;
                  out[15] = 1;
                  return out;
              };
              mat4.fromYRotation = function (out, rad) {
                  var s = Math.sin(rad), c = Math.cos(rad);
                  out[0] = c;
                  out[1] = 0;
                  out[2] = -s;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = 1;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = s;
                  out[9] = 0;
                  out[10] = c;
                  out[11] = 0;
                  out[12] = 0;
                  out[13] = 0;
                  out[14] = 0;
                  out[15] = 1;
                  return out;
              };
              mat4.fromZRotation = function (out, rad) {
                  var s = Math.sin(rad), c = Math.cos(rad);
                  out[0] = c;
                  out[1] = s;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = -s;
                  out[5] = c;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = 0;
                  out[10] = 1;
                  out[11] = 0;
                  out[12] = 0;
                  out[13] = 0;
                  out[14] = 0;
                  out[15] = 1;
                  return out;
              };
              mat4.fromRotationTranslation = function (out, q, v) {
                  var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
                  out[0] = 1 - (yy + zz);
                  out[1] = xy + wz;
                  out[2] = xz - wy;
                  out[3] = 0;
                  out[4] = xy - wz;
                  out[5] = 1 - (xx + zz);
                  out[6] = yz + wx;
                  out[7] = 0;
                  out[8] = xz + wy;
                  out[9] = yz - wx;
                  out[10] = 1 - (xx + yy);
                  out[11] = 0;
                  out[12] = v[0];
                  out[13] = v[1];
                  out[14] = v[2];
                  out[15] = 1;
                  return out;
              };
              mat4.getTranslation = function (out, mat) {
                  out[0] = mat[12];
                  out[1] = mat[13];
                  out[2] = mat[14];
                  return out;
              };
              mat4.getRotation = function (out, mat) {
                  var trace = mat[0] + mat[5] + mat[10];
                  var S = 0;
                  if (trace > 0) {
                      S = Math.sqrt(trace + 1.0) * 2;
                      out[3] = 0.25 * S;
                      out[0] = (mat[6] - mat[9]) / S;
                      out[1] = (mat[8] - mat[2]) / S;
                      out[2] = (mat[1] - mat[4]) / S;
                  }
                  else if ((mat[0] > mat[5]) & (mat[0] > mat[10])) {
                      S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
                      out[3] = (mat[6] - mat[9]) / S;
                      out[0] = 0.25 * S;
                      out[1] = (mat[1] + mat[4]) / S;
                      out[2] = (mat[8] + mat[2]) / S;
                  }
                  else if (mat[5] > mat[10]) {
                      S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
                      out[3] = (mat[8] - mat[2]) / S;
                      out[0] = (mat[1] + mat[4]) / S;
                      out[1] = 0.25 * S;
                      out[2] = (mat[6] + mat[9]) / S;
                  }
                  else {
                      S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
                      out[3] = (mat[1] - mat[4]) / S;
                      out[0] = (mat[8] + mat[2]) / S;
                      out[1] = (mat[6] + mat[9]) / S;
                      out[2] = 0.25 * S;
                  }
                  return out;
              };
              mat4.fromRotationTranslationScale = function (out, q, v, s) {
                  var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2, sx = s[0], sy = s[1], sz = s[2];
                  out[0] = (1 - (yy + zz)) * sx;
                  out[1] = (xy + wz) * sx;
                  out[2] = (xz - wy) * sx;
                  out[3] = 0;
                  out[4] = (xy - wz) * sy;
                  out[5] = (1 - (xx + zz)) * sy;
                  out[6] = (yz + wx) * sy;
                  out[7] = 0;
                  out[8] = (xz + wy) * sz;
                  out[9] = (yz - wx) * sz;
                  out[10] = (1 - (xx + yy)) * sz;
                  out[11] = 0;
                  out[12] = v[0];
                  out[13] = v[1];
                  out[14] = v[2];
                  out[15] = 1;
                  return out;
              };
              mat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {
                  var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2, sx = s[0], sy = s[1], sz = s[2], ox = o[0], oy = o[1], oz = o[2];
                  out[0] = (1 - (yy + zz)) * sx;
                  out[1] = (xy + wz) * sx;
                  out[2] = (xz - wy) * sx;
                  out[3] = 0;
                  out[4] = (xy - wz) * sy;
                  out[5] = (1 - (xx + zz)) * sy;
                  out[6] = (yz + wx) * sy;
                  out[7] = 0;
                  out[8] = (xz + wy) * sz;
                  out[9] = (yz - wx) * sz;
                  out[10] = (1 - (xx + yy)) * sz;
                  out[11] = 0;
                  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
                  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
                  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
                  out[15] = 1;
                  return out;
              };
              mat4.fromQuat = function (out, q) {
                  var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, yx = y * x2, yy = y * y2, zx = z * x2, zy = z * y2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
                  out[0] = 1 - yy - zz;
                  out[1] = yx + wz;
                  out[2] = zx - wy;
                  out[3] = 0;
                  out[4] = yx - wz;
                  out[5] = 1 - xx - zz;
                  out[6] = zy + wx;
                  out[7] = 0;
                  out[8] = zx + wy;
                  out[9] = zy - wx;
                  out[10] = 1 - xx - yy;
                  out[11] = 0;
                  out[12] = 0;
                  out[13] = 0;
                  out[14] = 0;
                  out[15] = 1;
                  return out;
              };
              mat4.frustum = function (out, left, right, bottom, top, near, far) {
                  var rl = 1 / (right - left), tb = 1 / (top - bottom), nf = 1 / (near - far);
                  out[0] = (near * 2) * rl;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = (near * 2) * tb;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = (right + left) * rl;
                  out[9] = (top + bottom) * tb;
                  out[10] = (far + near) * nf;
                  out[11] = -1;
                  out[12] = 0;
                  out[13] = 0;
                  out[14] = (far * near * 2) * nf;
                  out[15] = 0;
                  return out;
              };
              mat4.perspective = function (out, fovy, aspect, near, far) {
                  var f = 1.0 / Math.tan(fovy / 2), nf = 1 / (near - far);
                  out[0] = f / aspect;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = f;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = 0;
                  out[10] = (far + near) * nf;
                  out[11] = -1;
                  out[12] = 0;
                  out[13] = 0;
                  out[14] = (2 * far * near) * nf;
                  out[15] = 0;
                  return out;
              };
              mat4.perspectiveFromFieldOfView = function (out, fov, near, far) {
                  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0), downTan = Math.tan(fov.downDegrees * Math.PI / 180.0), leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0), rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0), xScale = 2.0 / (leftTan + rightTan), yScale = 2.0 / (upTan + downTan);
                  out[0] = xScale;
                  out[1] = 0.0;
                  out[2] = 0.0;
                  out[3] = 0.0;
                  out[4] = 0.0;
                  out[5] = yScale;
                  out[6] = 0.0;
                  out[7] = 0.0;
                  out[8] = -((leftTan - rightTan) * xScale * 0.5);
                  out[9] = ((upTan - downTan) * yScale * 0.5);
                  out[10] = far / (near - far);
                  out[11] = -1.0;
                  out[12] = 0.0;
                  out[13] = 0.0;
                  out[14] = (far * near) / (near - far);
                  out[15] = 0.0;
                  return out;
              };
              mat4.ortho = function (out, left, right, bottom, top, near, far) {
                  var lr = 1 / (left - right), bt = 1 / (bottom - top), nf = 1 / (near - far);
                  out[0] = -2 * lr;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  out[4] = 0;
                  out[5] = -2 * bt;
                  out[6] = 0;
                  out[7] = 0;
                  out[8] = 0;
                  out[9] = 0;
                  out[10] = 2 * nf;
                  out[11] = 0;
                  out[12] = (left + right) * lr;
                  out[13] = (top + bottom) * bt;
                  out[14] = (far + near) * nf;
                  out[15] = 1;
                  return out;
              };
              mat4.lookAt = function (out, eye, center, up) {
                  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len, eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2], centerx = center[0], centery = center[1], centerz = center[2];
                  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&
                      Math.abs(eyey - centery) < glMatrix.EPSILON &&
                      Math.abs(eyez - centerz) < glMatrix.EPSILON) {
                      return mat4.identity(out);
                  }
                  z0 = eyex - centerx;
                  z1 = eyey - centery;
                  z2 = eyez - centerz;
                  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
                  z0 *= len;
                  z1 *= len;
                  z2 *= len;
                  x0 = upy * z2 - upz * z1;
                  x1 = upz * z0 - upx * z2;
                  x2 = upx * z1 - upy * z0;
                  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
                  if (!len) {
                      x0 = 0;
                      x1 = 0;
                      x2 = 0;
                  }
                  else {
                      len = 1 / len;
                      x0 *= len;
                      x1 *= len;
                      x2 *= len;
                  }
                  y0 = z1 * x2 - z2 * x1;
                  y1 = z2 * x0 - z0 * x2;
                  y2 = z0 * x1 - z1 * x0;
                  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
                  if (!len) {
                      y0 = 0;
                      y1 = 0;
                      y2 = 0;
                  }
                  else {
                      len = 1 / len;
                      y0 *= len;
                      y1 *= len;
                      y2 *= len;
                  }
                  out[0] = x0;
                  out[1] = y0;
                  out[2] = z0;
                  out[3] = 0;
                  out[4] = x1;
                  out[5] = y1;
                  out[6] = z1;
                  out[7] = 0;
                  out[8] = x2;
                  out[9] = y2;
                  out[10] = z2;
                  out[11] = 0;
                  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
                  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
                  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
                  out[15] = 1;
                  return out;
              };
              mat4.str = function (a) {
                  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                      a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                      a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +
                      a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
              };
              mat4.frob = function (a) {
                  return (Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2)));
              };
              mat4.add = function (out, a, b) {
                  out[0] = a[0] + b[0];
                  out[1] = a[1] + b[1];
                  out[2] = a[2] + b[2];
                  out[3] = a[3] + b[3];
                  out[4] = a[4] + b[4];
                  out[5] = a[5] + b[5];
                  out[6] = a[6] + b[6];
                  out[7] = a[7] + b[7];
                  out[8] = a[8] + b[8];
                  out[9] = a[9] + b[9];
                  out[10] = a[10] + b[10];
                  out[11] = a[11] + b[11];
                  out[12] = a[12] + b[12];
                  out[13] = a[13] + b[13];
                  out[14] = a[14] + b[14];
                  out[15] = a[15] + b[15];
                  return out;
              };
              mat4.subtract = function (out, a, b) {
                  out[0] = a[0] - b[0];
                  out[1] = a[1] - b[1];
                  out[2] = a[2] - b[2];
                  out[3] = a[3] - b[3];
                  out[4] = a[4] - b[4];
                  out[5] = a[5] - b[5];
                  out[6] = a[6] - b[6];
                  out[7] = a[7] - b[7];
                  out[8] = a[8] - b[8];
                  out[9] = a[9] - b[9];
                  out[10] = a[10] - b[10];
                  out[11] = a[11] - b[11];
                  out[12] = a[12] - b[12];
                  out[13] = a[13] - b[13];
                  out[14] = a[14] - b[14];
                  out[15] = a[15] - b[15];
                  return out;
              };
              mat4.sub = mat4.subtract;
              mat4.multiplyScalar = function (out, a, b) {
                  out[0] = a[0] * b;
                  out[1] = a[1] * b;
                  out[2] = a[2] * b;
                  out[3] = a[3] * b;
                  out[4] = a[4] * b;
                  out[5] = a[5] * b;
                  out[6] = a[6] * b;
                  out[7] = a[7] * b;
                  out[8] = a[8] * b;
                  out[9] = a[9] * b;
                  out[10] = a[10] * b;
                  out[11] = a[11] * b;
                  out[12] = a[12] * b;
                  out[13] = a[13] * b;
                  out[14] = a[14] * b;
                  out[15] = a[15] * b;
                  return out;
              };
              mat4.multiplyScalarAndAdd = function (out, a, b, scale) {
                  out[0] = a[0] + (b[0] * scale);
                  out[1] = a[1] + (b[1] * scale);
                  out[2] = a[2] + (b[2] * scale);
                  out[3] = a[3] + (b[3] * scale);
                  out[4] = a[4] + (b[4] * scale);
                  out[5] = a[5] + (b[5] * scale);
                  out[6] = a[6] + (b[6] * scale);
                  out[7] = a[7] + (b[7] * scale);
                  out[8] = a[8] + (b[8] * scale);
                  out[9] = a[9] + (b[9] * scale);
                  out[10] = a[10] + (b[10] * scale);
                  out[11] = a[11] + (b[11] * scale);
                  out[12] = a[12] + (b[12] * scale);
                  out[13] = a[13] + (b[13] * scale);
                  out[14] = a[14] + (b[14] * scale);
                  out[15] = a[15] + (b[15] * scale);
                  return out;
              };
              mat4.exactEquals = function (a, b) {
                  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&
                      a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&
                      a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&
                      a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
              };
              mat4.equals = function (a, b) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11], a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
                  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
                  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                      Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
                      Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
                      Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
                      Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
                      Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
                      Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
                      Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
                      Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&
                      Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&
                      Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&
                      Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&
                      Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&
                      Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&
                      Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&
                      Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15)));
              };
              module.exports = mat4;
          },
          function (module, exports, __webpack_require__) {
              var glMatrix = __webpack_require__(1);
              var mat3 = __webpack_require__(4);
              var vec3 = __webpack_require__(7);
              var vec4 = __webpack_require__(8);
              var quat = {};
              quat.create = function () {
                  var out = new glMatrix.ARRAY_TYPE(4);
                  out[0] = 0;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 1;
                  return out;
              };
              quat.rotationTo = (function () {
                  var tmpvec3 = vec3.create();
                  var xUnitVec3 = vec3.fromValues(1, 0, 0);
                  var yUnitVec3 = vec3.fromValues(0, 1, 0);
                  return function (out, a, b) {
                      var dot = vec3.dot(a, b);
                      if (dot < -0.999999) {
                          vec3.cross(tmpvec3, xUnitVec3, a);
                          if (vec3.length(tmpvec3) < 0.000001)
                              vec3.cross(tmpvec3, yUnitVec3, a);
                          vec3.normalize(tmpvec3, tmpvec3);
                          quat.setAxisAngle(out, tmpvec3, Math.PI);
                          return out;
                      }
                      else if (dot > 0.999999) {
                          out[0] = 0;
                          out[1] = 0;
                          out[2] = 0;
                          out[3] = 1;
                          return out;
                      }
                      else {
                          vec3.cross(tmpvec3, a, b);
                          out[0] = tmpvec3[0];
                          out[1] = tmpvec3[1];
                          out[2] = tmpvec3[2];
                          out[3] = 1 + dot;
                          return quat.normalize(out, out);
                      }
                  };
              })();
              quat.setAxes = (function () {
                  var matr = mat3.create();
                  return function (out, view, right, up) {
                      matr[0] = right[0];
                      matr[3] = right[1];
                      matr[6] = right[2];
                      matr[1] = up[0];
                      matr[4] = up[1];
                      matr[7] = up[2];
                      matr[2] = -view[0];
                      matr[5] = -view[1];
                      matr[8] = -view[2];
                      return quat.normalize(out, quat.fromMat3(out, matr));
                  };
              })();
              quat.clone = vec4.clone;
              quat.fromValues = vec4.fromValues;
              quat.copy = vec4.copy;
              quat.set = vec4.set;
              quat.identity = function (out) {
                  out[0] = 0;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 1;
                  return out;
              };
              quat.setAxisAngle = function (out, axis, rad) {
                  rad = rad * 0.5;
                  var s = Math.sin(rad);
                  out[0] = s * axis[0];
                  out[1] = s * axis[1];
                  out[2] = s * axis[2];
                  out[3] = Math.cos(rad);
                  return out;
              };
              quat.getAxisAngle = function (out_axis, q) {
                  var rad = Math.acos(q[3]) * 2.0;
                  var s = Math.sin(rad / 2.0);
                  if (s != 0.0) {
                      out_axis[0] = q[0] / s;
                      out_axis[1] = q[1] / s;
                      out_axis[2] = q[2] / s;
                  }
                  else {
                      out_axis[0] = 1;
                      out_axis[1] = 0;
                      out_axis[2] = 0;
                  }
                  return rad;
              };
              quat.add = vec4.add;
              quat.multiply = function (out, a, b) {
                  var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = b[0], by = b[1], bz = b[2], bw = b[3];
                  out[0] = ax * bw + aw * bx + ay * bz - az * by;
                  out[1] = ay * bw + aw * by + az * bx - ax * bz;
                  out[2] = az * bw + aw * bz + ax * by - ay * bx;
                  out[3] = aw * bw - ax * bx - ay * by - az * bz;
                  return out;
              };
              quat.mul = quat.multiply;
              quat.scale = vec4.scale;
              quat.rotateX = function (out, a, rad) {
                  rad *= 0.5;
                  var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = Math.sin(rad), bw = Math.cos(rad);
                  out[0] = ax * bw + aw * bx;
                  out[1] = ay * bw + az * bx;
                  out[2] = az * bw - ay * bx;
                  out[3] = aw * bw - ax * bx;
                  return out;
              };
              quat.rotateY = function (out, a, rad) {
                  rad *= 0.5;
                  var ax = a[0], ay = a[1], az = a[2], aw = a[3], by = Math.sin(rad), bw = Math.cos(rad);
                  out[0] = ax * bw - az * by;
                  out[1] = ay * bw + aw * by;
                  out[2] = az * bw + ax * by;
                  out[3] = aw * bw - ay * by;
                  return out;
              };
              quat.rotateZ = function (out, a, rad) {
                  rad *= 0.5;
                  var ax = a[0], ay = a[1], az = a[2], aw = a[3], bz = Math.sin(rad), bw = Math.cos(rad);
                  out[0] = ax * bw + ay * bz;
                  out[1] = ay * bw - ax * bz;
                  out[2] = az * bw + aw * bz;
                  out[3] = aw * bw - az * bz;
                  return out;
              };
              quat.calculateW = function (out, a) {
                  var x = a[0], y = a[1], z = a[2];
                  out[0] = x;
                  out[1] = y;
                  out[2] = z;
                  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
                  return out;
              };
              quat.dot = vec4.dot;
              quat.lerp = vec4.lerp;
              quat.slerp = function (out, a, b, t) {
                  var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = b[0], by = b[1], bz = b[2], bw = b[3];
                  var omega, cosom, sinom, scale0, scale1;
                  cosom = ax * bx + ay * by + az * bz + aw * bw;
                  if (cosom < 0.0) {
                      cosom = -cosom;
                      bx = -bx;
                      by = -by;
                      bz = -bz;
                      bw = -bw;
                  }
                  if ((1.0 - cosom) > 0.000001) {
                      omega = Math.acos(cosom);
                      sinom = Math.sin(omega);
                      scale0 = Math.sin((1.0 - t) * omega) / sinom;
                      scale1 = Math.sin(t * omega) / sinom;
                  }
                  else {
                      scale0 = 1.0 - t;
                      scale1 = t;
                  }
                  out[0] = scale0 * ax + scale1 * bx;
                  out[1] = scale0 * ay + scale1 * by;
                  out[2] = scale0 * az + scale1 * bz;
                  out[3] = scale0 * aw + scale1 * bw;
                  return out;
              };
              quat.sqlerp = (function () {
                  var temp1 = quat.create();
                  var temp2 = quat.create();
                  return function (out, a, b, c, d, t) {
                      quat.slerp(temp1, a, d, t);
                      quat.slerp(temp2, b, c, t);
                      quat.slerp(out, temp1, temp2, 2 * t * (1 - t));
                      return out;
                  };
              }());
              quat.invert = function (out, a) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3, invDot = dot ? 1.0 / dot : 0;
                  out[0] = -a0 * invDot;
                  out[1] = -a1 * invDot;
                  out[2] = -a2 * invDot;
                  out[3] = a3 * invDot;
                  return out;
              };
              quat.conjugate = function (out, a) {
                  out[0] = -a[0];
                  out[1] = -a[1];
                  out[2] = -a[2];
                  out[3] = a[3];
                  return out;
              };
              quat.length = vec4.length;
              quat.len = quat.length;
              quat.squaredLength = vec4.squaredLength;
              quat.sqrLen = quat.squaredLength;
              quat.normalize = vec4.normalize;
              quat.fromMat3 = function (out, m) {
                  var fTrace = m[0] + m[4] + m[8];
                  var fRoot;
                  if (fTrace > 0.0) {
                      fRoot = Math.sqrt(fTrace + 1.0);
                      out[3] = 0.5 * fRoot;
                      fRoot = 0.5 / fRoot;
                      out[0] = (m[5] - m[7]) * fRoot;
                      out[1] = (m[6] - m[2]) * fRoot;
                      out[2] = (m[1] - m[3]) * fRoot;
                  }
                  else {
                      var i = 0;
                      if (m[4] > m[0])
                          i = 1;
                      if (m[8] > m[i * 3 + i])
                          i = 2;
                      var j = (i + 1) % 3;
                      var k = (i + 2) % 3;
                      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
                      out[i] = 0.5 * fRoot;
                      fRoot = 0.5 / fRoot;
                      out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
                      out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
                      out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
                  }
                  return out;
              };
              quat.str = function (a) {
                  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
              };
              quat.exactEquals = vec4.exactEquals;
              quat.equals = vec4.equals;
              module.exports = quat;
          },
          function (module, exports, __webpack_require__) {
              var glMatrix = __webpack_require__(1);
              var vec3 = {};
              vec3.create = function () {
                  var out = new glMatrix.ARRAY_TYPE(3);
                  out[0] = 0;
                  out[1] = 0;
                  out[2] = 0;
                  return out;
              };
              vec3.clone = function (a) {
                  var out = new glMatrix.ARRAY_TYPE(3);
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  return out;
              };
              vec3.fromValues = function (x, y, z) {
                  var out = new glMatrix.ARRAY_TYPE(3);
                  out[0] = x;
                  out[1] = y;
                  out[2] = z;
                  return out;
              };
              vec3.copy = function (out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  return out;
              };
              vec3.set = function (out, x, y, z) {
                  out[0] = x;
                  out[1] = y;
                  out[2] = z;
                  return out;
              };
              vec3.add = function (out, a, b) {
                  out[0] = a[0] + b[0];
                  out[1] = a[1] + b[1];
                  out[2] = a[2] + b[2];
                  return out;
              };
              vec3.subtract = function (out, a, b) {
                  out[0] = a[0] - b[0];
                  out[1] = a[1] - b[1];
                  out[2] = a[2] - b[2];
                  return out;
              };
              vec3.sub = vec3.subtract;
              vec3.multiply = function (out, a, b) {
                  out[0] = a[0] * b[0];
                  out[1] = a[1] * b[1];
                  out[2] = a[2] * b[2];
                  return out;
              };
              vec3.mul = vec3.multiply;
              vec3.divide = function (out, a, b) {
                  out[0] = a[0] / b[0];
                  out[1] = a[1] / b[1];
                  out[2] = a[2] / b[2];
                  return out;
              };
              vec3.div = vec3.divide;
              vec3.ceil = function (out, a) {
                  out[0] = Math.ceil(a[0]);
                  out[1] = Math.ceil(a[1]);
                  out[2] = Math.ceil(a[2]);
                  return out;
              };
              vec3.floor = function (out, a) {
                  out[0] = Math.floor(a[0]);
                  out[1] = Math.floor(a[1]);
                  out[2] = Math.floor(a[2]);
                  return out;
              };
              vec3.min = function (out, a, b) {
                  out[0] = Math.min(a[0], b[0]);
                  out[1] = Math.min(a[1], b[1]);
                  out[2] = Math.min(a[2], b[2]);
                  return out;
              };
              vec3.max = function (out, a, b) {
                  out[0] = Math.max(a[0], b[0]);
                  out[1] = Math.max(a[1], b[1]);
                  out[2] = Math.max(a[2], b[2]);
                  return out;
              };
              vec3.round = function (out, a) {
                  out[0] = Math.round(a[0]);
                  out[1] = Math.round(a[1]);
                  out[2] = Math.round(a[2]);
                  return out;
              };
              vec3.scale = function (out, a, b) {
                  out[0] = a[0] * b;
                  out[1] = a[1] * b;
                  out[2] = a[2] * b;
                  return out;
              };
              vec3.scaleAndAdd = function (out, a, b, scale) {
                  out[0] = a[0] + (b[0] * scale);
                  out[1] = a[1] + (b[1] * scale);
                  out[2] = a[2] + (b[2] * scale);
                  return out;
              };
              vec3.distance = function (a, b) {
                  var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];
                  return Math.sqrt(x * x + y * y + z * z);
              };
              vec3.dist = vec3.distance;
              vec3.squaredDistance = function (a, b) {
                  var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];
                  return x * x + y * y + z * z;
              };
              vec3.sqrDist = vec3.squaredDistance;
              vec3.length = function (a) {
                  var x = a[0], y = a[1], z = a[2];
                  return Math.sqrt(x * x + y * y + z * z);
              };
              vec3.len = vec3.length;
              vec3.squaredLength = function (a) {
                  var x = a[0], y = a[1], z = a[2];
                  return x * x + y * y + z * z;
              };
              vec3.sqrLen = vec3.squaredLength;
              vec3.negate = function (out, a) {
                  out[0] = -a[0];
                  out[1] = -a[1];
                  out[2] = -a[2];
                  return out;
              };
              vec3.inverse = function (out, a) {
                  out[0] = 1.0 / a[0];
                  out[1] = 1.0 / a[1];
                  out[2] = 1.0 / a[2];
                  return out;
              };
              vec3.normalize = function (out, a) {
                  var x = a[0], y = a[1], z = a[2];
                  var len = x * x + y * y + z * z;
                  if (len > 0) {
                      len = 1 / Math.sqrt(len);
                      out[0] = a[0] * len;
                      out[1] = a[1] * len;
                      out[2] = a[2] * len;
                  }
                  return out;
              };
              vec3.dot = function (a, b) {
                  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
              };
              vec3.cross = function (out, a, b) {
                  var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2];
                  out[0] = ay * bz - az * by;
                  out[1] = az * bx - ax * bz;
                  out[2] = ax * by - ay * bx;
                  return out;
              };
              vec3.lerp = function (out, a, b, t) {
                  var ax = a[0], ay = a[1], az = a[2];
                  out[0] = ax + t * (b[0] - ax);
                  out[1] = ay + t * (b[1] - ay);
                  out[2] = az + t * (b[2] - az);
                  return out;
              };
              vec3.hermite = function (out, a, b, c, d, t) {
                  var factorTimes2 = t * t, factor1 = factorTimes2 * (2 * t - 3) + 1, factor2 = factorTimes2 * (t - 2) + t, factor3 = factorTimes2 * (t - 1), factor4 = factorTimes2 * (3 - 2 * t);
                  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
                  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
                  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
                  return out;
              };
              vec3.bezier = function (out, a, b, c, d, t) {
                  var inverseFactor = 1 - t, inverseFactorTimesTwo = inverseFactor * inverseFactor, factorTimes2 = t * t, factor1 = inverseFactorTimesTwo * inverseFactor, factor2 = 3 * t * inverseFactorTimesTwo, factor3 = 3 * factorTimes2 * inverseFactor, factor4 = factorTimes2 * t;
                  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
                  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
                  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
                  return out;
              };
              vec3.random = function (out, scale) {
                  scale = scale || 1.0;
                  var r = glMatrix.RANDOM() * 2.0 * Math.PI;
                  var z = (glMatrix.RANDOM() * 2.0) - 1.0;
                  var zScale = Math.sqrt(1.0 - z * z) * scale;
                  out[0] = Math.cos(r) * zScale;
                  out[1] = Math.sin(r) * zScale;
                  out[2] = z * scale;
                  return out;
              };
              vec3.transformMat4 = function (out, a, m) {
                  var x = a[0], y = a[1], z = a[2], w = m[3] * x + m[7] * y + m[11] * z + m[15];
                  w = w || 1.0;
                  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
                  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
                  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
                  return out;
              };
              vec3.transformMat3 = function (out, a, m) {
                  var x = a[0], y = a[1], z = a[2];
                  out[0] = x * m[0] + y * m[3] + z * m[6];
                  out[1] = x * m[1] + y * m[4] + z * m[7];
                  out[2] = x * m[2] + y * m[5] + z * m[8];
                  return out;
              };
              vec3.transformQuat = function (out, a, q) {
                  var x = a[0], y = a[1], z = a[2], qx = q[0], qy = q[1], qz = q[2], qw = q[3], ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;
                  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
                  return out;
              };
              vec3.rotateX = function (out, a, b, c) {
                  var p = [], r = [];
                  p[0] = a[0] - b[0];
                  p[1] = a[1] - b[1];
                  p[2] = a[2] - b[2];
                  r[0] = p[0];
                  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
                  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);
                  out[0] = r[0] + b[0];
                  out[1] = r[1] + b[1];
                  out[2] = r[2] + b[2];
                  return out;
              };
              vec3.rotateY = function (out, a, b, c) {
                  var p = [], r = [];
                  p[0] = a[0] - b[0];
                  p[1] = a[1] - b[1];
                  p[2] = a[2] - b[2];
                  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
                  r[1] = p[1];
                  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);
                  out[0] = r[0] + b[0];
                  out[1] = r[1] + b[1];
                  out[2] = r[2] + b[2];
                  return out;
              };
              vec3.rotateZ = function (out, a, b, c) {
                  var p = [], r = [];
                  p[0] = a[0] - b[0];
                  p[1] = a[1] - b[1];
                  p[2] = a[2] - b[2];
                  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
                  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
                  r[2] = p[2];
                  out[0] = r[0] + b[0];
                  out[1] = r[1] + b[1];
                  out[2] = r[2] + b[2];
                  return out;
              };
              vec3.forEach = (function () {
                  var vec = vec3.create();
                  return function (a, stride, offset, count, fn, arg) {
                      var i, l;
                      if (!stride) {
                          stride = 3;
                      }
                      if (!offset) {
                          offset = 0;
                      }
                      if (count) {
                          l = Math.min((count * stride) + offset, a.length);
                      }
                      else {
                          l = a.length;
                      }
                      for (i = offset; i < l; i += stride) {
                          vec[0] = a[i];
                          vec[1] = a[i + 1];
                          vec[2] = a[i + 2];
                          fn(vec, vec, arg);
                          a[i] = vec[0];
                          a[i + 1] = vec[1];
                          a[i + 2] = vec[2];
                      }
                      return a;
                  };
              })();
              vec3.angle = function (a, b) {
                  var tempA = vec3.fromValues(a[0], a[1], a[2]);
                  var tempB = vec3.fromValues(b[0], b[1], b[2]);
                  vec3.normalize(tempA, tempA);
                  vec3.normalize(tempB, tempB);
                  var cosine = vec3.dot(tempA, tempB);
                  if (cosine > 1.0) {
                      return 0;
                  }
                  else {
                      return Math.acos(cosine);
                  }
              };
              vec3.str = function (a) {
                  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
              };
              vec3.exactEquals = function (a, b) {
                  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
              };
              vec3.equals = function (a, b) {
                  var a0 = a[0], a1 = a[1], a2 = a[2];
                  var b0 = b[0], b1 = b[1], b2 = b[2];
                  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                      Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
                      Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)));
              };
              module.exports = vec3;
          },
          function (module, exports, __webpack_require__) {
              var glMatrix = __webpack_require__(1);
              var vec4 = {};
              vec4.create = function () {
                  var out = new glMatrix.ARRAY_TYPE(4);
                  out[0] = 0;
                  out[1] = 0;
                  out[2] = 0;
                  out[3] = 0;
                  return out;
              };
              vec4.clone = function (a) {
                  var out = new glMatrix.ARRAY_TYPE(4);
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  return out;
              };
              vec4.fromValues = function (x, y, z, w) {
                  var out = new glMatrix.ARRAY_TYPE(4);
                  out[0] = x;
                  out[1] = y;
                  out[2] = z;
                  out[3] = w;
                  return out;
              };
              vec4.copy = function (out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  out[2] = a[2];
                  out[3] = a[3];
                  return out;
              };
              vec4.set = function (out, x, y, z, w) {
                  out[0] = x;
                  out[1] = y;
                  out[2] = z;
                  out[3] = w;
                  return out;
              };
              vec4.add = function (out, a, b) {
                  out[0] = a[0] + b[0];
                  out[1] = a[1] + b[1];
                  out[2] = a[2] + b[2];
                  out[3] = a[3] + b[3];
                  return out;
              };
              vec4.subtract = function (out, a, b) {
                  out[0] = a[0] - b[0];
                  out[1] = a[1] - b[1];
                  out[2] = a[2] - b[2];
                  out[3] = a[3] - b[3];
                  return out;
              };
              vec4.sub = vec4.subtract;
              vec4.multiply = function (out, a, b) {
                  out[0] = a[0] * b[0];
                  out[1] = a[1] * b[1];
                  out[2] = a[2] * b[2];
                  out[3] = a[3] * b[3];
                  return out;
              };
              vec4.mul = vec4.multiply;
              vec4.divide = function (out, a, b) {
                  out[0] = a[0] / b[0];
                  out[1] = a[1] / b[1];
                  out[2] = a[2] / b[2];
                  out[3] = a[3] / b[3];
                  return out;
              };
              vec4.div = vec4.divide;
              vec4.ceil = function (out, a) {
                  out[0] = Math.ceil(a[0]);
                  out[1] = Math.ceil(a[1]);
                  out[2] = Math.ceil(a[2]);
                  out[3] = Math.ceil(a[3]);
                  return out;
              };
              vec4.floor = function (out, a) {
                  out[0] = Math.floor(a[0]);
                  out[1] = Math.floor(a[1]);
                  out[2] = Math.floor(a[2]);
                  out[3] = Math.floor(a[3]);
                  return out;
              };
              vec4.min = function (out, a, b) {
                  out[0] = Math.min(a[0], b[0]);
                  out[1] = Math.min(a[1], b[1]);
                  out[2] = Math.min(a[2], b[2]);
                  out[3] = Math.min(a[3], b[3]);
                  return out;
              };
              vec4.max = function (out, a, b) {
                  out[0] = Math.max(a[0], b[0]);
                  out[1] = Math.max(a[1], b[1]);
                  out[2] = Math.max(a[2], b[2]);
                  out[3] = Math.max(a[3], b[3]);
                  return out;
              };
              vec4.round = function (out, a) {
                  out[0] = Math.round(a[0]);
                  out[1] = Math.round(a[1]);
                  out[2] = Math.round(a[2]);
                  out[3] = Math.round(a[3]);
                  return out;
              };
              vec4.scale = function (out, a, b) {
                  out[0] = a[0] * b;
                  out[1] = a[1] * b;
                  out[2] = a[2] * b;
                  out[3] = a[3] * b;
                  return out;
              };
              vec4.scaleAndAdd = function (out, a, b, scale) {
                  out[0] = a[0] + (b[0] * scale);
                  out[1] = a[1] + (b[1] * scale);
                  out[2] = a[2] + (b[2] * scale);
                  out[3] = a[3] + (b[3] * scale);
                  return out;
              };
              vec4.distance = function (a, b) {
                  var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];
                  return Math.sqrt(x * x + y * y + z * z + w * w);
              };
              vec4.dist = vec4.distance;
              vec4.squaredDistance = function (a, b) {
                  var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];
                  return x * x + y * y + z * z + w * w;
              };
              vec4.sqrDist = vec4.squaredDistance;
              vec4.length = function (a) {
                  var x = a[0], y = a[1], z = a[2], w = a[3];
                  return Math.sqrt(x * x + y * y + z * z + w * w);
              };
              vec4.len = vec4.length;
              vec4.squaredLength = function (a) {
                  var x = a[0], y = a[1], z = a[2], w = a[3];
                  return x * x + y * y + z * z + w * w;
              };
              vec4.sqrLen = vec4.squaredLength;
              vec4.negate = function (out, a) {
                  out[0] = -a[0];
                  out[1] = -a[1];
                  out[2] = -a[2];
                  out[3] = -a[3];
                  return out;
              };
              vec4.inverse = function (out, a) {
                  out[0] = 1.0 / a[0];
                  out[1] = 1.0 / a[1];
                  out[2] = 1.0 / a[2];
                  out[3] = 1.0 / a[3];
                  return out;
              };
              vec4.normalize = function (out, a) {
                  var x = a[0], y = a[1], z = a[2], w = a[3];
                  var len = x * x + y * y + z * z + w * w;
                  if (len > 0) {
                      len = 1 / Math.sqrt(len);
                      out[0] = x * len;
                      out[1] = y * len;
                      out[2] = z * len;
                      out[3] = w * len;
                  }
                  return out;
              };
              vec4.dot = function (a, b) {
                  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
              };
              vec4.lerp = function (out, a, b, t) {
                  var ax = a[0], ay = a[1], az = a[2], aw = a[3];
                  out[0] = ax + t * (b[0] - ax);
                  out[1] = ay + t * (b[1] - ay);
                  out[2] = az + t * (b[2] - az);
                  out[3] = aw + t * (b[3] - aw);
                  return out;
              };
              vec4.random = function (out, scale) {
                  scale = scale || 1.0;
                  out[0] = glMatrix.RANDOM();
                  out[1] = glMatrix.RANDOM();
                  out[2] = glMatrix.RANDOM();
                  out[3] = glMatrix.RANDOM();
                  vec4.normalize(out, out);
                  vec4.scale(out, out, scale);
                  return out;
              };
              vec4.transformMat4 = function (out, a, m) {
                  var x = a[0], y = a[1], z = a[2], w = a[3];
                  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
                  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
                  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
                  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
                  return out;
              };
              vec4.transformQuat = function (out, a, q) {
                  var x = a[0], y = a[1], z = a[2], qx = q[0], qy = q[1], qz = q[2], qw = q[3], ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;
                  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
                  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
                  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
                  out[3] = a[3];
                  return out;
              };
              vec4.forEach = (function () {
                  var vec = vec4.create();
                  return function (a, stride, offset, count, fn, arg) {
                      var i, l;
                      if (!stride) {
                          stride = 4;
                      }
                      if (!offset) {
                          offset = 0;
                      }
                      if (count) {
                          l = Math.min((count * stride) + offset, a.length);
                      }
                      else {
                          l = a.length;
                      }
                      for (i = offset; i < l; i += stride) {
                          vec[0] = a[i];
                          vec[1] = a[i + 1];
                          vec[2] = a[i + 2];
                          vec[3] = a[i + 3];
                          fn(vec, vec, arg);
                          a[i] = vec[0];
                          a[i + 1] = vec[1];
                          a[i + 2] = vec[2];
                          a[i + 3] = vec[3];
                      }
                      return a;
                  };
              })();
              vec4.str = function (a) {
                  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
              };
              vec4.exactEquals = function (a, b) {
                  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
              };
              vec4.equals = function (a, b) {
                  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
                  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
                  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                      Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
                      Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
                      Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)));
              };
              module.exports = vec4;
          },
          function (module, exports, __webpack_require__) {
              var glMatrix = __webpack_require__(1);
              var vec2 = {};
              vec2.create = function () {
                  var out = new glMatrix.ARRAY_TYPE(2);
                  out[0] = 0;
                  out[1] = 0;
                  return out;
              };
              vec2.clone = function (a) {
                  var out = new glMatrix.ARRAY_TYPE(2);
                  out[0] = a[0];
                  out[1] = a[1];
                  return out;
              };
              vec2.fromValues = function (x, y) {
                  var out = new glMatrix.ARRAY_TYPE(2);
                  out[0] = x;
                  out[1] = y;
                  return out;
              };
              vec2.copy = function (out, a) {
                  out[0] = a[0];
                  out[1] = a[1];
                  return out;
              };
              vec2.set = function (out, x, y) {
                  out[0] = x;
                  out[1] = y;
                  return out;
              };
              vec2.add = function (out, a, b) {
                  out[0] = a[0] + b[0];
                  out[1] = a[1] + b[1];
                  return out;
              };
              vec2.subtract = function (out, a, b) {
                  out[0] = a[0] - b[0];
                  out[1] = a[1] - b[1];
                  return out;
              };
              vec2.sub = vec2.subtract;
              vec2.multiply = function (out, a, b) {
                  out[0] = a[0] * b[0];
                  out[1] = a[1] * b[1];
                  return out;
              };
              vec2.mul = vec2.multiply;
              vec2.divide = function (out, a, b) {
                  out[0] = a[0] / b[0];
                  out[1] = a[1] / b[1];
                  return out;
              };
              vec2.div = vec2.divide;
              vec2.ceil = function (out, a) {
                  out[0] = Math.ceil(a[0]);
                  out[1] = Math.ceil(a[1]);
                  return out;
              };
              vec2.floor = function (out, a) {
                  out[0] = Math.floor(a[0]);
                  out[1] = Math.floor(a[1]);
                  return out;
              };
              vec2.min = function (out, a, b) {
                  out[0] = Math.min(a[0], b[0]);
                  out[1] = Math.min(a[1], b[1]);
                  return out;
              };
              vec2.max = function (out, a, b) {
                  out[0] = Math.max(a[0], b[0]);
                  out[1] = Math.max(a[1], b[1]);
                  return out;
              };
              vec2.round = function (out, a) {
                  out[0] = Math.round(a[0]);
                  out[1] = Math.round(a[1]);
                  return out;
              };
              vec2.scale = function (out, a, b) {
                  out[0] = a[0] * b;
                  out[1] = a[1] * b;
                  return out;
              };
              vec2.scaleAndAdd = function (out, a, b, scale) {
                  out[0] = a[0] + (b[0] * scale);
                  out[1] = a[1] + (b[1] * scale);
                  return out;
              };
              vec2.distance = function (a, b) {
                  var x = b[0] - a[0], y = b[1] - a[1];
                  return Math.sqrt(x * x + y * y);
              };
              vec2.dist = vec2.distance;
              vec2.squaredDistance = function (a, b) {
                  var x = b[0] - a[0], y = b[1] - a[1];
                  return x * x + y * y;
              };
              vec2.sqrDist = vec2.squaredDistance;
              vec2.length = function (a) {
                  var x = a[0], y = a[1];
                  return Math.sqrt(x * x + y * y);
              };
              vec2.len = vec2.length;
              vec2.squaredLength = function (a) {
                  var x = a[0], y = a[1];
                  return x * x + y * y;
              };
              vec2.sqrLen = vec2.squaredLength;
              vec2.negate = function (out, a) {
                  out[0] = -a[0];
                  out[1] = -a[1];
                  return out;
              };
              vec2.inverse = function (out, a) {
                  out[0] = 1.0 / a[0];
                  out[1] = 1.0 / a[1];
                  return out;
              };
              vec2.normalize = function (out, a) {
                  var x = a[0], y = a[1];
                  var len = x * x + y * y;
                  if (len > 0) {
                      len = 1 / Math.sqrt(len);
                      out[0] = a[0] * len;
                      out[1] = a[1] * len;
                  }
                  return out;
              };
              vec2.dot = function (a, b) {
                  return a[0] * b[0] + a[1] * b[1];
              };
              vec2.cross = function (out, a, b) {
                  var z = a[0] * b[1] - a[1] * b[0];
                  out[0] = out[1] = 0;
                  out[2] = z;
                  return out;
              };
              vec2.lerp = function (out, a, b, t) {
                  var ax = a[0], ay = a[1];
                  out[0] = ax + t * (b[0] - ax);
                  out[1] = ay + t * (b[1] - ay);
                  return out;
              };
              vec2.random = function (out, scale) {
                  scale = scale || 1.0;
                  var r = glMatrix.RANDOM() * 2.0 * Math.PI;
                  out[0] = Math.cos(r) * scale;
                  out[1] = Math.sin(r) * scale;
                  return out;
              };
              vec2.transformMat2 = function (out, a, m) {
                  var x = a[0], y = a[1];
                  out[0] = m[0] * x + m[2] * y;
                  out[1] = m[1] * x + m[3] * y;
                  return out;
              };
              vec2.transformMat2d = function (out, a, m) {
                  var x = a[0], y = a[1];
                  out[0] = m[0] * x + m[2] * y + m[4];
                  out[1] = m[1] * x + m[3] * y + m[5];
                  return out;
              };
              vec2.transformMat3 = function (out, a, m) {
                  var x = a[0], y = a[1];
                  out[0] = m[0] * x + m[3] * y + m[6];
                  out[1] = m[1] * x + m[4] * y + m[7];
                  return out;
              };
              vec2.transformMat4 = function (out, a, m) {
                  var x = a[0], y = a[1];
                  out[0] = m[0] * x + m[4] * y + m[12];
                  out[1] = m[1] * x + m[5] * y + m[13];
                  return out;
              };
              vec2.forEach = (function () {
                  var vec = vec2.create();
                  return function (a, stride, offset, count, fn, arg) {
                      var i, l;
                      if (!stride) {
                          stride = 2;
                      }
                      if (!offset) {
                          offset = 0;
                      }
                      if (count) {
                          l = Math.min((count * stride) + offset, a.length);
                      }
                      else {
                          l = a.length;
                      }
                      for (i = offset; i < l; i += stride) {
                          vec[0] = a[i];
                          vec[1] = a[i + 1];
                          fn(vec, vec, arg);
                          a[i] = vec[0];
                          a[i + 1] = vec[1];
                      }
                      return a;
                  };
              })();
              vec2.str = function (a) {
                  return 'vec2(' + a[0] + ', ' + a[1] + ')';
              };
              vec2.exactEquals = function (a, b) {
                  return a[0] === b[0] && a[1] === b[1];
              };
              vec2.equals = function (a, b) {
                  var a0 = a[0], a1 = a[1];
                  var b0 = b[0], b1 = b[1];
                  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
                      Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)));
              };
              module.exports = vec2;
          }
      ]);
  }
  http://requirejs.org/docs/errors.html#mismatch
  at /Users/huyiming/shader/CanvasToy/node_modules/requirejs/require.js:143


